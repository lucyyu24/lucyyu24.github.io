---
layout: post
title:  "What I Learned on My First Work Term as a Software Engineer"
date:   2015-08-28 15:55:00
categories: blog
meta: personal
---

What did I learn over the last four months? This is a tough question to answer partly because I've learned a lot and partly because many of the things I've learned have already been converted to implicit knowledge. Sometimes when I glance away from the screen to catch a train of thought, I get this strange feeling that I've been working here since forever, and that programming is a habit I've kept my entire life. So before the novelty of these four months begins to slip away from me, I'm going to try my best to document the experience. 

When I first started this work term, I was a tub of play-doh waiting to be moulded into shape. I was a caffeine-dependent adrenaline junkie and a total mercenary when it came to acquiring knowledge. Learning has always been a means to an end: I only learned to jump through hoops in the education system and was always aversive towards school. This work experience made me appreciate the process of learning and allowed me to rediscover the joy in building, hacking, and tinkering. Here are some of the things I learned along the way: 

**Create separation between work and leisure.** 

At the beginning of the term, I used to obsess over my work and would think about the projects I was working on even when I got home. Needless to say, this behaviour became stress-inducing and energy-draining over time. To stop my brain from over-clocking, I began using a notebook to record to-dos and work summaries. I wrote in this notebook twice a day: once in the morning to plan out the day's priorities, and once before I leave work to summarize what I did and what I still need to do. I left this notebook on my desk at work and never brought it home, and it became very helpful in unburdening my mind as well as creating the feeling of work-leisure separation. 

**Always Google first.**

This might be painfully obvious, but you should always conduct a Google search before bothering your co-workers about a question. This allows you to be self-sufficient and develop important research skills. Start off by learning about basic [Google search tips](http://blog.hubspot.com/blog/tabid/6307/bid/1264/12-Quick-Tips-To-Search-Google-Like-An-Expert.aspx), and as you begin to conduct more searches, you'll come to learn about specific resources (such as stack exchanges, reference sites) that provide high quality information for the languages/frameworks you're working with. 

**Be open about the roadblocks you're facing.**

There are going to be times when you hit soul-crushing roadblocks if you're working on a challenging project, and being honest about these roadblocks will not make you appear incompetent. As long as you're still persistently trying to come up with new solutions, you should make your supervisor understand the nature of the challenge you're facing. By not being open, you will run the risk of your supervisor assuming that you're lazy and the risk of not getting potentially valuable tips from him/her. 

**Write beautiful code.**

You probably already know what beautiful code looks like, so make your code beautiful. Abstract out functions when you can, switch to a different data structure if it's more efficient, and *documentate* the hell out of everything. At the end of the day, it's not about *just* getting the job done, but about writing organized code that's easy to maintain and efficient code that consume less resources. 

**Have fun.**

Last but not least, I've learned to truly enjoy coding and problem-solving. Building things that make an impact in the real world is both fun and exhilarating. Don't look at your work as "just work," but look at it as opportunities for learning and making a difference. This way, you'll find yourself breezing through the work term and having a *hella* good time while you're at it.  

